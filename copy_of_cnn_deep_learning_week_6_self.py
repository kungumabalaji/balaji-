# -*- coding: utf-8 -*-
"""Copy of CNN DEEP LEARNING WEEK 6 SELF

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pXWY-hYaNMBihLY30rIEhP14PcziYfav
"""

import tensorflow as tf
from keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D , MaxPooling2D, Flatten , Dense , Dropout
from keras.optimizers import SGD
import matplotlib.pyplot as plt
import numpy as np
from keras import utils

# conv2d helps to detect the patterns like edges, texturex, blur of the image
# Max pooling hepls to reduce the dimmenesion ( height , widhth )
#flatten layers hepl to in singe vector from conv2d to 1 d )
# droup out is to stop the traing to overlap

image_channel = 3
image_rows =32
image_rows = 32

# specipy the parameters
Batch_size= 32
N_EPOCHS = 20
N_CLASSES = 10    # n_class refers to the number of categories (or labels) your model predicts.


VERBOSE = 1   #   Detailed output (default). It shows a progress bar during training.
VALIDATE_SPLIT = 0.2
OPTIMISER = SGD ()

from keras.datasets import cifar10
(X_train ,y_train), (X_test, y_test) = cifar10.load_data()
print('X_train shape:', X_train.shape)

print(X_train.shape[0],'train samples')
print (X_test.shape[0],'test samples')

plt.imshow(X_train[7000])
plt.show()







# Import necessary libraries
from keras.datasets import cifar10
from keras.utils import to_categorical

# Load the CIFAR-10 dataset
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

# Define the number of classes (CIFAR-10 has 10 classes)
N_CLASSES = 10

# Convert the labels to categorical (one-hot encoding)
Y_train = to_categorical(y_train, N_CLASSES)
Y_test = to_categorical(y_test, N_CLASSES)

# Normalize the pixel values to the range [0, 1]
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

# define the model   # paddiing is to add an extra zero
#from tensorflow.keras.models import Sequential # Already imported, remove redundant import
#from tensorflow.keras.layers import Conv2D, Activation, MaxPooling2D, Dropout, Flatten, Dense # Already imported, remove redundant import

# Instead of 'sequential()', use 'Sequential()' with a capital 'S'
model = Sequential()

# cov 1 of 3,3
model.add(Conv2D(32,(3,3), padding='same',
input_shape=(image_rows,image_coloumns,image_channels)))
model.add(Activation('relu'))

# convolution layers 2 of 3,3
model.add(Conv2D(32,(3,3), padding='same'))
model.add(Activation('relu'))

# max pooling layer of 2 by 2 pooled region and stride of 1
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))
# convolution layers 3 of 3,3
model.add(Conv2D(64,(3,3), padding='same'))
model.add(Activation('relu'))

# convolution layers  4 of 3,3
model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))

# max pooling layer of 2 by 2 pooled region and stride of 1
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))


# You likely intended to use model here, not model2
# convolution layers 2 of 3,3
model.add(Conv2D(32,(3,3), padding='same')) # Corrected to Conv2D
model.add(Activation('relu'))

# max pooling layer of 2 by 2 pooled region and stride of 1
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))
# convolution layers 3 of 3,3
model.add(Conv2D(64,(3,3), padding='same')) # Corrected to Conv2D
model.add(Activation('relu'))

# convolution layers  4 of 3,3
model.add(Conv2D(64,(3,3))) # Corrected to Conv2D and (3, 3)
model.add(Activation('relu'))

# max pooling layer of 2 by 2 pooled region and stride of 1
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

from tensorflow import keras
from keras.models import Sequential
from keras.layers import Activation, Dropout, Conv2D, MaxPooling2D, Flatten, Dense # Import Flatten and Dense

# ... (rest of your code) ...

N_CLASSES = 10  # Define N_CLASSES with the desired number of classes, e.g., 10 for MNIST
# Define N_CLASSES before using it

model.add(Flatten()) # Use model instead of model2
model.add(Dense(512)) # Use model instead of model2
model.add(Activation('relu')) # Use model instead of model2
model.add(Dropout(0.5)) # Use model instead of model2
model.add(Dense(N_CLASSES)) # Assuming N_CLASSES is defined
model.add(Activation('softmax')) # Use model instead of model2
model.summary() # Use model instead of model2